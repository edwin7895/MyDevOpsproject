pipeline {
    agent any

    environment {
        PYTHON_ENV = "${WORKSPACE}/venv"
        PYTHONPATH = "${WORKSPACE}/frontend/src"
        DOCKER_IMAGE = "edwin789/frontend-python:latest"
        DOCKER_CREDENTIALS_ID = "docker-hub-credentials"
    }

    stages {
        stage('Checkout') {
            steps {
                git branch: 'feature/ci-cd', url: 'https://github.com/edwin7895/MyDevOpsproject.git'
            }
        }

        stage('Set up Python Environment') {
            steps {
                sh 'python3 -m venv ${PYTHON_ENV} && . ${PYTHON_ENV}/bin/activate && echo "Virtual environment activated"'
            }
        }

        stage('Install Dependencies') {
            steps {
                cache(path: 'frontend/src/venv', key: 'pip-cache') {
                    // Intentar instalar dependencias y mostrar errores si los hay
                    sh '. ${PYTHON_ENV}/bin/activate && pip install -r frontend/src/requirements.txt || echo "Dependency installation failed"'
                    // Mostrar la lista de dependencias instaladas
                    sh '. ${PYTHON_ENV}/bin/activate && pip list'
                }
            }
        }

        stage('Linting') {
            steps {
                sh '. ${PYTHON_ENV}/bin/activate && flake8 frontend/src'
            }
        }

        stage('Unit Tests') {
            steps {
                sh '. ${PYTHON_ENV}/bin/activate && export PYTHONPATH=${PYTHONPATH} && python -m xmlrunner discover -s frontend/src/tests -o frontend/src/reports'
            }
        }

        stage('Build Docker Image') {
            steps {
                script {
                    sh 'docker build -t ${DOCKER_IMAGE} frontend/src'
                }
            }
        }

        stage('
