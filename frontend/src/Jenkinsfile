pipeline {
    agent any

    environment {
        PYTHON_ENV = "${WORKSPACE}/venv"
        PYTHONPATH = "${WORKSPACE}/frontend/src"
        DOCKER_IMAGE = "edwin789/frontend-python:latest"  // Cambia esto según tu configuración
        DOCKER_CREDENTIALS_ID = "docker-hub-credentials"  // Cambia esto al ID de tus credenciales en Jenkins
    }

    stages {
        stage('Checkout') {
            steps {
                git branch: 'feature/ci-cd', url: 'https://github.com/edwin7895/MyDevOpsproject.git'
            }
        }

        stage('Set up Python Environment') {
            steps {
                sh 'python3 -m venv ${PYTHON_ENV}'
                sh '. ${PYTHON_ENV}/bin/activate'
            }
        }

        stage('Install Dependencies') {
            steps {
                sh '. ${PYTHON_ENV}/bin/activate && pip install -r frontend/src/requirements.txt'
            }
        }

        stage('Unit Tests') {
            steps {
                sh '. ${PYTHON_ENV}/bin/activate && export PYTHONPATH=${PYTHONPATH} && python -m xmlrunner discover -s frontend/src/tests -o frontend/src/reports'
                sh 'ls -l frontend/src/reports' // Debug para verificar archivos generados
            }
        }

        stage('Build Docker Image') {
            steps {
                script {
                    // Construir la imagen Docker
                    sh 'docker build -t ${DOCKER_IMAGE} frontend/src'
                }
            }
        }

        stage('Push Docker Image') {
            steps {
                script {
                    // Autenticarse en Docker Hub
                    withCredentials([usernamePassword(credentialsId: "${DOCKER_CREDENTIALS_ID}", passwordVariable: 'DOCKER_PASSWORD', usernameVariable: 'DOCKER_USERNAME')]) {
                        sh 'echo $DOCKER_PASSWORD | docker login -u $DOCKER_USERNAME --password-stdin'

                        // Push de la imagen a Docker Hub
                        sh 'docker push ${DOCKER_IMAGE}'

                        // Logout de Docker Hub
                        sh 'docker logout'
                    }
                }
            }
        }

        stage('Post-build') {
            steps {
                echo 'Build, Test, Docker Image creation, and Push to Docker Hub completed'
            }
        }
    }

    post {
        always {
            junit 'frontend/src/reports/*.xml'
            sh 'rm -rf ${PYTHON_ENV}'
        }
    }
}
