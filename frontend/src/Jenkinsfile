pipeline {
    agent any

    environment {
        PYTHON_ENV = "${WORKSPACE}/venv"
        PYTHONPATH = "${WORKSPACE}/frontend/src"
        DOCKER_IMAGE = "edwin789/frontend-python:latest"
        DOCKER_CREDENTIALS_ID = "docker-hub-credentials"
    }

    stages {
        stage('Checkout') {
            steps {
                git branch: 'feature/ci-cd', url: 'https://github.com/edwin7895/MyDevOpsproject.git'
            }
        }

        stage('Set up Python Environment') {
            steps {
                sh 'python3 -m venv ${PYTHON_ENV}'
                sh '. ${PYTHON_ENV}/bin/activate'
            }
        }

        stage('Install Dependencies') {
            steps {
                sh '. ${PYTHON_ENV}/bin/activate && pip install -r frontend/src/requirements.txt'
            }
        }

        stage('Linting') {
            steps {
                script {
                    // Captura los errores de linting y genera un warning sin detener el pipeline
                    catchError(buildResult: 'SUCCESS', stageResult: 'UNSTABLE') {
                        sh '. ${PYTHON_ENV}/bin/activate && flake8 frontend/src'
                    }
                }
            }
        }

        stage('Unit Tests') {
            steps {
                script {
                    // Activa el entorno virtual, corre los tests con cobertura y genera el reporte
                    sh '. ${PYTHON_ENV}/bin/activate && export PYTHONPATH=${PYTHONPATH} && pip install coverage && coverage run -m unittest discover -s frontend/src/tests'
                }
            }
        }

        stage('Coverage Report') {
            steps {
                script {
                    // Muestra el reporte de cobertura en consola
                    sh '. ${PYTHON_ENV}/bin/activate && coverage report -m'
                    
                    // Genera el reporte de cobertura en formato XML para integraciones con Jenkins
                    sh '. ${PYTHON_ENV}/bin/activate && coverage xml -o frontend/src/reports/coverage.xml'
                }
            }
        }



        // Añadir el análisis de SonarCloud
        stage('SonarQube Analysis') {
            steps {
                withSonarQubeEnv('SonarCloud') {
                    sh "export PATH=\$PATH:/opt/sonar-scanner/bin && sonar-scanner -Dsonar.branch.name=${env.BRANCH_NAME} -Dproject.settings=sonar-project-frontend.properties"
                }
            }
        }


        stage('Build Docker Image') {
            steps {
                script {
                    sh 'docker build -t ${DOCKER_IMAGE} frontend/src'
                }
            }
        }

        stage('Push Docker Image') {
            when {
                branch 'main'  // Solo hacer push a Docker Hub en la rama 'main'
            }
            steps {
                script {
                    withCredentials([usernamePassword(credentialsId: "${DOCKER_CREDENTIALS_ID}", passwordVariable: 'DOCKER_PASSWORD', usernameVariable: 'DOCKER_USERNAME')]) {
                        sh 'echo $DOCKER_PASSWORD | docker login -u $DOCKER_USERNAME --password-stdin > /dev/null 2>&1'
                        sh 'docker push ${DOCKER_IMAGE}'
                        sh 'docker logout'
                    }
                }
            }
        }

        stage('Post-build') {
            steps {
                echo 'Build, Test, Docker Image creation, and Push to Docker Hub completed'
                sh 'docker image prune -f'
            }
        }
    }

    post {
        always {
            junit 'frontend/src/reports/*.xml'
            sh 'rm -rf ${PYTHON_ENV}'
        }
    }
}
