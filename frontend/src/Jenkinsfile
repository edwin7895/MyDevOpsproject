pipeline {
    agent any

    environment {
        PYTHON_ENV = "${WORKSPACE}/venv"
        PYTHONPATH = "${WORKSPACE}/frontend/src"
        DOCKER_IMAGE = "edwin789/frontend-python:latest"  // Cambia esto según tu configuración
    }

    stages {
        stage('Checkout') {
            steps {
                git branch: 'feature/ci-cd', url: 'https://github.com/edwin7895/MyDevOpsproject.git'
            }
        }

        stage('Set up Python Environment') {
            steps {
                sh 'python3 -m venv ${PYTHON_ENV}'
                sh '. ${PYTHON_ENV}/bin/activate'
            }
        }

        stage('Install Dependencies') {
            steps {
                sh '. ${PYTHON_ENV}/bin/activate && pip install -r frontend/src/requirements.txt'
            }
        }

        stage('Unit Tests') {
            steps {
                sh '. ${PYTHON_ENV}/bin/activate && export PYTHONPATH=${PYTHONPATH} && python -m xmlrunner discover -s frontend/src/tests -o frontend/src/reports'
                sh 'ls -l frontend/src/reports' // Debug para verificar archivos generados
            }
        }

        stage('Build Docker Image') {
            steps {
                script {
                    // Construir la imagen Docker
                    sh 'docker build -t ${DOCKER_IMAGE} frontend/src'

                    // (Opcional) Subir la imagen a un registro Docker
                    // sh 'docker push ${DOCKER_IMAGE}'
                }
            }
        }

        stage('Post-build') {
            steps {
                echo 'Build, Test, and Docker Image creation completed'
            }
        }
    }

    post {
        always {
            junit 'frontend/src/reports/*.xml'
            sh 'rm -rf ${PYTHON_ENV}'
        }
    }
}
