pipeline {
    agent any

    environment {
        GO_ENV = "${WORKSPACE}/go_env"
        DOCKER_IMAGE = "edwin789/backend-go:latest"
        DOCKER_CREDENTIALS_ID = "docker-hub-credentials"
    }

    stages {
        stage('Checkout') {
            steps {
                git branch: 'main', url: 'https://github.com/edwin7895/MyDevOpsproject.git'
            }
        }

        stage('Set up Go Environment') {
            steps {
                sh 'mkdir -p ${GO_ENV}/bin && export GOPATH=${GO_ENV}'
            }
        }
        
        stage('Install Dependencies') {
            steps {
                dir('backend/src') { // Asegúrate de estar en el directorio correcto
                    sh 'go mod tidy'
                }
            }

        stage('Linting') {
            steps {
                script {
                    // Si utilizas alguna herramienta de linting en Go como `golangci-lint`, añádela aquí
                    catchError(buildResult: 'SUCCESS', stageResult: 'UNSTABLE') {
                        sh 'go vet ./...'
                    }
                }
            }
        }

        stage('Unit Tests') {
            steps {
                sh 'go test -v ./... -coverprofile=coverage.out'
            }
        }

        stage('Coverage Report') {
            steps {
                sh 'go tool cover -func=coverage.out'
            }
        }

        stage('Build Docker Image') {
            steps {
                script {
                    sh 'docker build -t ${DOCKER_IMAGE} .'
                }
            }
        }

        stage('Push Docker Image') {
            when {
                branch 'main'  // Solo hacer push a Docker Hub en la rama 'main'
            }
            steps {
                script {
                    withCredentials([usernamePassword(credentialsId: "${DOCKER_CREDENTIALS_ID}", passwordVariable: 'DOCKER_PASSWORD', usernameVariable: 'DOCKER_USERNAME')]) {
                        sh 'echo $DOCKER_PASSWORD | docker login -u $DOCKER_USERNAME --password-stdin'
                        sh 'docker push ${DOCKER_IMAGE}'
                        sh 'docker logout'
                    }
                }
            }
        }

        stage('Post-build') {
            steps {
                echo 'Build, Test, Docker Image creation, and Push to Docker Hub completed'
                sh 'docker image prune -f'
            }
        }
    }

    post {
        always {
            cleanWs()  // Limpia el workspace después de la ejecución del pipeline
        }
        failure {
            echo 'Pipeline failed. Check the logs.'
        }
    }
}
